// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// init_mem
SEXP init_mem(std::string name, std::size_t length, int data_type, std::string mem_type);
RcppExport SEXP _rmada_init_mem(SEXP nameSEXP, SEXP lengthSEXP, SEXP data_typeSEXP, SEXP mem_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< int >::type data_type(data_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type mem_type(mem_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(init_mem(name, length, data_type, mem_type));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_rmada_init_mem", (DL_FUNC) &_rmada_init_mem, 4},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmada(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
