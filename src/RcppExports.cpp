// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rmada_types.hpp"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// n_rows
arma::uword n_rows(SEXP x);
RcppExport SEXP _rmada_n_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(n_rows(x));
    return rcpp_result_gen;
END_RCPP
}
// n_cols
arma::uword n_cols(SEXP x);
RcppExport SEXP _rmada_n_cols(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(n_cols(x));
    return rcpp_result_gen;
END_RCPP
}
// n_elem
arma::uword n_elem(SEXP x);
RcppExport SEXP _rmada_n_elem(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(n_elem(x));
    return rcpp_result_gen;
END_RCPP
}
// n_slices
arma::uword n_slices(SEXP x);
RcppExport SEXP _rmada_n_slices(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(n_slices(x));
    return rcpp_result_gen;
END_RCPP
}
// fill_predefined
void fill_predefined(SEXP x, std::size_t how);
RcppExport SEXP _rmada_fill_predefined(SEXP xSEXP, SEXP howSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type how(howSEXP);
    fill_predefined(x, how);
    return R_NilValue;
END_RCPP
}
// fill_value
void fill_value(SEXP x, SEXP what);
RcppExport SEXP _rmada_fill_value(SEXP xSEXP, SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type what(whatSEXP);
    fill_value(x, what);
    return R_NilValue;
END_RCPP
}
// fill_fun
void fill_fun(SEXP x, SEXP how);
RcppExport SEXP _rmada_fill_fun(SEXP xSEXP, SEXP howSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type how(howSEXP);
    fill_fun(x, how);
    return R_NilValue;
END_RCPP
}
// mat_init
SEXP mat_init(SEXP mem, arma::uword n_rows, arma::uword n_cols, std::size_t data_type);
RcppExport SEXP _rmada_mat_init(SEXP memSEXP, SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP data_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type data_type(data_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_init(mem, n_rows, n_cols, data_type));
    return rcpp_result_gen;
END_RCPP
}
// mat_subset
SEXP mat_subset(SEXP x, arma::uvec i, arma::uvec j);
RcppExport SEXP _rmada_mat_subset(SEXP xSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_subset(x, i, j));
    return rcpp_result_gen;
END_RCPP
}
// mat_subview
SEXP mat_subview(SEXP x, arma::uvec i, arma::uvec j);
RcppExport SEXP _rmada_mat_subview(SEXP xSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_subview(x, i, j));
    return rcpp_result_gen;
END_RCPP
}
// mem_init
SEXP mem_init(std::string name, std::size_t n_elem, std::size_t data_type, std::size_t mem_type);
RcppExport SEXP _rmada_mem_init(SEXP nameSEXP, SEXP n_elemSEXP, SEXP data_typeSEXP, SEXP mem_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_elem(n_elemSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type data_type(data_typeSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type mem_type(mem_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mem_init(name, n_elem, data_type, mem_type));
    return rcpp_result_gen;
END_RCPP
}
// mem_attach
void mem_attach(SEXP mem);
RcppExport SEXP _rmada_mem_attach(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    mem_attach(mem);
    return R_NilValue;
END_RCPP
}
// mem_detach
void mem_detach(SEXP mem);
RcppExport SEXP _rmada_mem_detach(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    mem_detach(mem);
    return R_NilValue;
END_RCPP
}
// is_mem_attached
bool is_mem_attached(SEXP mem);
RcppExport SEXP _rmada_is_mem_attached(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mem_attached(mem));
    return rcpp_result_gen;
END_RCPP
}
// get_mem_address
SEXP get_mem_address(SEXP mem);
RcppExport SEXP _rmada_get_mem_address(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_address(mem));
    return rcpp_result_gen;
END_RCPP
}
// get_mem_length
std::size_t get_mem_length(SEXP mem);
RcppExport SEXP _rmada_get_mem_length(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_length(mem));
    return rcpp_result_gen;
END_RCPP
}
// get_mem_id
std::string get_mem_id(SEXP mem);
RcppExport SEXP _rmada_get_mem_id(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_id(mem));
    return rcpp_result_gen;
END_RCPP
}
// mem_remove
void mem_remove(SEXP mem);
RcppExport SEXP _rmada_mem_remove(SEXP memSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    mem_remove(mem);
    return R_NilValue;
END_RCPP
}
// mem_resize
void mem_resize(SEXP mem, std::size_t n_elem);
RcppExport SEXP _rmada_mem_resize(SEXP memSEXP, SEXP n_elemSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mem(memSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_elem(n_elemSEXP);
    mem_resize(mem, n_elem);
    return R_NilValue;
END_RCPP
}
// list_num_types
std::vector<std::string> list_num_types();
RcppExport SEXP _rmada_list_num_types() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_num_types());
    return rcpp_result_gen;
END_RCPP
}
// list_mem_types
std::vector<std::string> list_mem_types();
RcppExport SEXP _rmada_list_mem_types() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_mem_types());
    return rcpp_result_gen;
END_RCPP
}
// list_arma_types
std::vector<std::string> list_arma_types();
RcppExport SEXP _rmada_list_arma_types() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_arma_types());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_rmada_n_rows", (DL_FUNC) &_rmada_n_rows, 1},
    {"_rmada_n_cols", (DL_FUNC) &_rmada_n_cols, 1},
    {"_rmada_n_elem", (DL_FUNC) &_rmada_n_elem, 1},
    {"_rmada_n_slices", (DL_FUNC) &_rmada_n_slices, 1},
    {"_rmada_fill_predefined", (DL_FUNC) &_rmada_fill_predefined, 2},
    {"_rmada_fill_value", (DL_FUNC) &_rmada_fill_value, 2},
    {"_rmada_fill_fun", (DL_FUNC) &_rmada_fill_fun, 2},
    {"_rmada_mat_init", (DL_FUNC) &_rmada_mat_init, 4},
    {"_rmada_mat_subset", (DL_FUNC) &_rmada_mat_subset, 3},
    {"_rmada_mat_subview", (DL_FUNC) &_rmada_mat_subview, 3},
    {"_rmada_mem_init", (DL_FUNC) &_rmada_mem_init, 4},
    {"_rmada_mem_attach", (DL_FUNC) &_rmada_mem_attach, 1},
    {"_rmada_mem_detach", (DL_FUNC) &_rmada_mem_detach, 1},
    {"_rmada_is_mem_attached", (DL_FUNC) &_rmada_is_mem_attached, 1},
    {"_rmada_get_mem_address", (DL_FUNC) &_rmada_get_mem_address, 1},
    {"_rmada_get_mem_length", (DL_FUNC) &_rmada_get_mem_length, 1},
    {"_rmada_get_mem_id", (DL_FUNC) &_rmada_get_mem_id, 1},
    {"_rmada_mem_remove", (DL_FUNC) &_rmada_mem_remove, 1},
    {"_rmada_mem_resize", (DL_FUNC) &_rmada_mem_resize, 2},
    {"_rmada_list_num_types", (DL_FUNC) &_rmada_list_num_types, 0},
    {"_rmada_list_mem_types", (DL_FUNC) &_rmada_list_mem_types, 0},
    {"_rmada_list_arma_types", (DL_FUNC) &_rmada_list_arma_types, 0},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rmada(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
